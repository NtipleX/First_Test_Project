
#include <iostream>
#define N 5
int позначені[N];


class вузлик {
public:
	вузлик** добрий_сусід;
	uint16_t кількість_сусідів;
	int name;
	
	вузлик(int name_) :кількість_сусідів(0), name(name_)
	{}


	friend void стати_сусідом(вузлик* цей, вузлик* цього) {
		вузлик** тимч = цей->добрий_сусід;
		вузлик* передача;
		цей->добрий_сусід = new вузлик* [цей->кількість_сусідів + 1];
		for (int i = 0; i < цей->кількість_сусідів; i++)
		{
			передача = тимч[i];
			цей->добрий_сусід[i] = передача;
		}
		цей->добрий_сусід[цей->кількість_сусідів] = цього;
		цей->кількість_сусідів++;
		
		/////////////////

		тимч = цього->добрий_сусід;
		цього->добрий_сусід = new вузлик * [цього->кількість_сусідів + 1];
		for (int i = 0; i < цього->кількість_сусідів; i++)
		{
			цього->добрий_сусід[i] = тимч[i];
		}
		цього->добрий_сусід[цього->кількість_сусідів] = цей;
		цього->кількість_сусідів++;
		
	}

};

void proc(вузлик*,int);

int main()
{

	вузлик а(1);
	вузлик б(2);
	вузлик в(3);
	вузлик г(4);
	вузлик д(5);
	вузлик л(6);


	/*стати_сусідом(&а, &б);

	стати_сусідом(&б, &в);
	стати_сусідом(&л, &г);
	стати_сусідом(&в, &г);
	стати_сусідом(&в, &д);
	стати_сусідом(&л, &б);
	*/

	/*
	стати_сусідом(&а, &б);
	стати_сусідом(&б, &в);
	стати_сусідом(&в, &г);
	стати_сусідом(&в, &д);
	стати_сусідом(&д, &г);
	*/
	стати_сусідом(&а, &б);
	стати_сусідом(&б, &в);
	стати_сусідом(&г, &в);
	стати_сусідом(&г, &а);




	proc(&а,-1);




	return 0;
}
bool mfind(вузлик* ver, int endpoint,int non)
{
	for (int i = 0; i < ver->кількість_сусідів; i++)
	{
		if (ver->добрий_сусід[i]->name == endpoint) {
			std::cout << endpoint << std::endl;
			std::cout << ver->name << std::endl;
			return true;
		}
		else if (ver->добрий_сусід[i]->name == non) continue;
		
		else {
			bool found = mfind(ver->добрий_сусід[i], endpoint,ver->name);
			if (found) std::cout << ver->name<<std::endl;
			return false;
			
		}
	}
	return false;
}

void proc(вузлик* верш,int non) 
{
	позначені[верш->name-1] = 1;

	for (int i = 0; i < верш->кількість_сусідів; i++)
	{
		if (верш->добрий_сусід[i]->name == non) {
			continue;
		}
		if (позначені[верш->добрий_сусід[i]->name-1] == 0) {
			proc(верш->добрий_сусід[i],верш->name);
		}
		else if (позначені[верш->добрий_сусід[i]->name-1] == 1)
		{
			int endpoint = верш->добрий_сусід[i]->name;
			for (int i = 0; i < верш->кількість_сусідів; i++)
			{
				if (верш->добрий_сусід[i]->name == endpoint) continue;
				mfind(верш->добрий_сусід[i], endpoint,верш->name);
			}
			std::cout << верш->name<<std::endl;
			std::cout << std::endl;
		}
	}
			//std::cout << верш->name;
	позначені[верш->name - 1] = -1;
}
